---
import Navigation from "../components/Navigation.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../site_config";
import { ViewTransitions } from "astro:transitions";

export interface Props {
  /** Title of the page */
  title?: string;
  /** Description of the page */
  description?: string;
  /** OpenGraph thumbnail of the page */
  thumbnail?: {
    /** URL of the thumbnail */
    src: string;
    /** Alt text of the thumbnail */
    alt: string;
  };
  /** Canonical URL of the page */
  canonical?: string;
}

const {
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  canonical,
} = Astro.props;
---

<style>
  .getstarted-rectangle {
    background: url("/public/getstarted.svg");
    background-blend-mode: screen, normal;
    background-size: cover;
    background-position: center;
  }

  #particleCanvas {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
  }
</style>
<!-- Include p5.js library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>

<!-- Particle System Script -->
<script type="module">
  // const gridSize = 16;
  // const spacing = 64;
  // let particles = [];
  // let angle = 0;

  // function setup() {
  //   let canvas = createCanvas(windowWidth, windowHeight, WEBGL);
  //   canvas.parent('particleCanvas');  // Attach the canvas to the particleCanvas div
  //   background('#1B1C1D');

  //   for (let x = 0; x < gridSize; x++) {
  //     particles[x] = [];
  //     for (let y = 0; y < gridSize; y++) {
  //       particles[x][y] = [];
  //       for (let z = 0; z < gridSize; z++) {
  //         particles[x][y][z] = createVector(
  //           (x - gridSize / 2) * spacing,
  //           (y - gridSize / 2) * spacing,
  //           (z - gridSize / 2) * spacing
  //         );
  //       }
  //     }
  //   }
  // }

  // function draw() {
  //   background('#1B1C1D');
  //   lights();
  //   translate(0, 0, -200);
  //   rotateY(angle);
  //   rotateX(-0.5);
  //   angle += 0.0005;

  //   noStroke();
  //   fill(255);

  //   for (let x = 0; x < gridSize; x++) {
  //     for (let y = 0; y < gridSize; y++) {
  //       for (let z = 0; z < gridSize; z++) {
  //         let p = particles[x][y][z];
  //         push();
  //         translate(p.x, p.y, p.z);
  //         box(0.5);
  //         pop();
  //       }
  //     }
  //   }
  // }

  // function windowResized() {
  //   resizeCanvas(windowWidth, windowHeight);
  // }

  // window.setup = setup;
  // window.draw = draw;
  // window.windowResized = windowResized;
  let numParticles = 400; // Number of particles
  let particles = [];
  let lines = [];
  let maxLines = 5; // Maximum number of lines to appear simultaneously

  function setup() {
    let canvas = createCanvas(windowWidth, windowHeight);
    canvas.parent("particleCanvas"); // Attach the canvas to the particleCanvas div
    for (let i = 0; i < numParticles; i++) {
      particles.push(new Particle());
    }
  }

  function draw() {
    background("#171819");

    // Move and display particles
    for (let i = 0; i < numParticles; i++) {
      particles[i].move();
      particles[i].display();
    }

    // Draw connecting lines
    for (let i = lines.length - 1; i >= 0; i--) {
      let l = lines[i];
      l.update();
      if (l.isDead()) {
        lines.splice(i, 1);
      } else {
        l.display();
      }
    }

    // Add new lines randomly
    if (lines.length < maxLines) {
      for (let i = 0; i < numParticles; i++) {
        for (let j = i + 1; j < numParticles; j++) {
          if (
            dist(
              particles[i].x,
              particles[i].y,
              particles[j].x,
              particles[j].y
            ) < 100 &&
            random(1) < 0.001
          ) {
            lines.push(new Line(particles[i], particles[j]));
          }
        }
      }
    }
  }

  class Particle {
    constructor() {
      this.x = random(width);
      this.y = random(height);
      this.speedX = 0;
      this.speedY = 0;
      this.diameter = random(1, 2);
      this.noiseOffsetX = random(1000);
      this.noiseOffsetY = random(1000);
    }

    move() {
      this.speedX = map(noise(this.noiseOffsetX), 0, 1, -1, 1);
      this.speedY = map(noise(this.noiseOffsetY), 0, 1, -1, 1);
      this.noiseOffsetX += 0.01;
      this.noiseOffsetY += 0.01;

      this.x += this.speedX * 0.5;
      this.y += this.speedY * 0.5;

      // Wrap around the screen
      if (this.x < 0) this.x = width;
      if (this.x > width) this.x = 0;
      if (this.y < 0) this.y = height;
      if (this.y > height) this.y = 0;
    }

    display() {
      noStroke();
      fill(150);
      ellipse(this.x, this.y, this.diameter, this.diameter);
    }
  }

  class Line {
    constructor(p1, p2) {
      this.p1 = p1;
      this.p2 = p2;
      this.lifespan = 80; // lasts for about a second at 60 FPS
    }

    update() {
      this.lifespan--;
    }

    isDead() {
      return this.lifespan <= 0;
    }

    display() {
      stroke(255, map(this.lifespan, 0, 60, 0, 255));
      line(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
    }
  }

  function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
  }

  window.setup = setup;
  window.draw = draw;
  window.windowResized = windowResized;
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&family=Roboto&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;700;900&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
    <ViewTransitions />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    {canonical && <link rel="canonical" href={canonical} />}

    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.request.url} />
    <meta name="twitter:card" content="summary_large_image" />
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-93RHYT4C93"
    ></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-93RHYT4C93");
    </script>
  </head>

  <body class="bg-[#171819] scroll-smooth">
    <div id="particleCanvas"></div>
    <slot />
  </body>
</html>
